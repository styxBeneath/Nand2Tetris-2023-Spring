// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int maxLen;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 0) {
            do Sys.error(14);
        }

        let str = Array.new(Math.max(1, maxLength));
        let maxLen = maxLength;
        let length = 0;

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ((j < 0) | (j > (length - 1))) {
            do Sys.error(15);
        }

        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j < 0) | (j > (length - 1))) {
            do Sys.error(16);
        }

        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length = maxLen) {
            do Sys.error(17);
        }

        let str[length] = c;
        let length = length + 1;

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length = 0) {
            do Sys.error(18);
        }

        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int res;
        var int sign;
        var int i;

        if (str[0] = 45) {
            let sign = -1;
            let i = 1;
        } else {
            let sign = 1;
            let i = 0;
        }

        let res = 0;
        while (i < length) {
            if (String.isDigit(str[i])) {
                let res = 10 * res + (str[i] - 48);
                let i = i + 1;
            } else {
                let i = length;
            }
        }

        return res * sign;
    }

    function boolean isDigit(char ch) {
        return ch > 48 & ch < 58;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;

        if (val < 0) {
            if (maxLen = 0) {
                do Sys.error(19);
            }

            do appendChar(45);
        }

        do appendPositiveInteger(Math.abs(val));
        return;
    }

    method void appendPositiveInteger(int val) {
        var int lastChar;

        if (val > 10) {
            do appendPositiveInteger(val / 10);
        }
        if (length = maxLen) {
            do Sys.error(19);
        }

        let lastChar = (val - ((val / 10) * 10)) + 48;
        do appendChar(lastChar);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}